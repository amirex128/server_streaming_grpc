
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParsGoServiceClient is the client API for ParsGoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParsGoServiceClient interface {
	ReceiveProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ParsGoService_ReceiveProductClient, error)
}

type parsGoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParsGoServiceClient(cc grpc.ClientConnInterface) ParsGoServiceClient {
	return &parsGoServiceClient{cc}
}

func (c *parsGoServiceClient) ReceiveProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ParsGoService_ReceiveProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &ParsGoService_ServiceDesc.Streams[0], "/rpc.ParsGoService/ReceiveProduct", opts...)
	if err != nil {
		return nil, err
	}
	x := &parsGoServiceReceiveProductClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ParsGoService_ReceiveProductClient interface {
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type parsGoServiceReceiveProductClient struct {
	grpc.ClientStream
}

func (x *parsGoServiceReceiveProductClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ParsGoServiceServer is the server API for ParsGoService service.
// All implementations must embed UnimplementedParsGoServiceServer
// for forward compatibility
type ParsGoServiceServer interface {
	ReceiveProduct(*ProductRequest, ParsGoService_ReceiveProductServer) error
	mustEmbedUnimplementedParsGoServiceServer()
}

// UnimplementedParsGoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParsGoServiceServer struct {
}

func (UnimplementedParsGoServiceServer) ReceiveProduct(*ProductRequest, ParsGoService_ReceiveProductServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveProduct not implemented")
}
func (UnimplementedParsGoServiceServer) mustEmbedUnimplementedParsGoServiceServer() {}

// UnsafeParsGoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParsGoServiceServer will
// result in compilation errors.
type UnsafeParsGoServiceServer interface {
	mustEmbedUnimplementedParsGoServiceServer()
}

func RegisterParsGoServiceServer(s grpc.ServiceRegistrar, srv ParsGoServiceServer) {
	s.RegisterService(&ParsGoService_ServiceDesc, srv)
}

func _ParsGoService_ReceiveProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParsGoServiceServer).ReceiveProduct(m, &parsGoServiceReceiveProductServer{stream})
}

type ParsGoService_ReceiveProductServer interface {
	Send(*ProductResponse) error
	grpc.ServerStream
}

type parsGoServiceReceiveProductServer struct {
	grpc.ServerStream
}

func (x *parsGoServiceReceiveProductServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ParsGoService_ServiceDesc is the grpc.ServiceDesc for ParsGoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParsGoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ParsGoService",
	HandlerType: (*ParsGoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveProduct",
			Handler:       _ParsGoService_ReceiveProduct_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "product.proto",
}
